import os
import whisper
from tqdm import tqdm
import subprocess
from openvino.runtime import Core 

DATASET_DIR = "video" 
OUTPUT_DIR = "text_dataset"  
MODEL_SIZE = "medium" 

FFMPEG_PATH = os.path.join(os.path.dirname(__file__), "ffmpeg.exe")

try:
    subprocess.run([FFMPEG_PATH, "-version"], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    print("FFmpeg работает корректно")
except:
    print("Ошибка: FFmpeg не найден в папке со скриптом")
    exit(1)

ie = Core()
devices = ie.available_devices
print(f"Доступные устройства OpenVINO: {devices}")  
model = whisper.load_model(MODEL_SIZE)
print(f"Модель Whisper '{MODEL_SIZE}' загружена")

def extract_audio(input_path, output_audio_path):
    subprocess.run([
        FFMPEG_PATH,
        "-i", input_path,
        "-vn", "-ac", "1", "-ar", "16000",
        "-acodec", "pcm_s16le",
        output_audio_path,
        "-y"
    ], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def process_file(input_path, output_text_path):
    try:
        temp_audio = "temp_audio.wav"
        extract_audio(input_path, temp_audio)
        
        # Используем OpenVINO для ускорения (если GPU доступен)
        result = model.transcribe(temp_audio, language="ru", fp16=False)  
        
        with open(output_text_path, "w", encoding="utf-8") as f:
            f.write(result["text"])
        
        os.remove(temp_audio)
        return True
    except Exception as e:
        print(f"Ошибка при обработке {input_path}: {str(e)}")
        return False

os.makedirs(OUTPUT_DIR, exist_ok=True)

total_files = 0
success_files = 0

for root, dirs, files in os.walk(DATASET_DIR):
    for file in tqdm(files, desc="Обработка файлов"):
        if file.lower().endswith(('.mp4', '.avi', '.mkv', '.mp3', '.wav')):
            total_files += 1
            
            input_path = os.path.join(root, file)
            relative_path = os.path.relpath(input_path, DATASET_DIR)
            output_path = os.path.join(OUTPUT_DIR, relative_path + ".txt")
            
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            if process_file(input_path, output_path):
                success_files += 1

print(f"\n  Обработано файлов: {success_files}/{total_files}")
print(f" Тексты сохранены в папку: {OUTPUT_DIR}")
